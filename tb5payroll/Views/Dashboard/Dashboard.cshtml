
@{
	Layout = "_DashboardLayout";
	ViewBag.Title = "Dashboard";
}

<h2 class="text-left mb-4">Employee Dashboard</h2>

<!-- Replace the controls section with this -->
<div class="dashboard-controls mb-3">
	<!-- Search Input -->
	<input type="text" id="searchInput" class="form-control" placeholder="Search Employee..." onkeyup="searchEmployee()">

	<!-- Print Button -->
	<button id="printAllBtn" class="btn btn-primary">Print All</button>

	<!-- File Input with custom styling -->
	<div class="file-input-container">
		<div class="custom-file-input">
			<input type="file" id="excelFileInput" accept=".xlsx">
			<label for="excelFileInput" class="custom-file-input-label">
				<span id="fileInputLabel">Choose File</span>
				<i class="fas fa-upload ms-2"></i>
			</label>
		</div>
	</div>

	<!-- Sheet Select -->
	<select id="sheetSelect" class="form-select" disabled>
		<option>Choose Sheet</option>
	</select>
</div>

<!-- Employee Table -->
<div class="table-responsive" style="max-height: 370px; overflow-y: auto; border: 1px solid #ccc;">
	<table class="table table-sm table-bordered text-center" id="employeeTable" style="margin-bottom: 0; font-size: 17px;">
		<thead class="table-dark" style="background-color: skyblue;">
		<tr>
			<th style="position: sticky; top: 0; z-index: 2; background: skyblue;">ID No</th>
			<th style="position: sticky; top: 0; z-index: 2; background: skyblue;">Name</th>
			<th style="position: sticky; top: 0; z-index: 2; background: skyblue;">Workday</th> 
			<th style="position: sticky; top: 0; z-index: 2; background: skyblue;">Holiday</th>
			<th style="position: sticky; top: 0; z-index: 2; background: skyblue;">Overtime</th>
			<th style="position: sticky; top: 0; z-index: 2; background: skyblue;">Hours Worked</th>
			<th style="position: sticky; top: 0; z-index: 2; background: skyblue;">Actions</th>
		</tr>
		</thead>
		<tbody>
		<!-- Rows will be populated dynamically -->
		</tbody>
	</table>
</div>

<!-- Modal -->
<div class="modal fade" id="detailsModal" tabindex="-1" aria-labelledby="detailsModalLabel" aria-hidden="true">
	<div class="modal-dialog modal-xl">
		<div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title" id="detailsModalLabel">Employee Payslip</h5>
				<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
			</div>
			<div class="modal-body">
				<table class="payslip-table">
					<tr>
						<th colspan="7">THE BIG FIVE TRAINING AND ASSESSMENT CENTER</th>
						<th colspan="3">EMPLOYEE'S COPY</th>
					</tr>
					<tr>
						<th colspan="3">PAYSLIP - SEMI MONTHLY PAYROLL</th>
						<td>PERIOD</td>
						<td colspan="3">1st CUT OFF (1st / 15th)</td>
						<td colspan="3">&nbsp;</td>
					</tr>
					<tr>
						<td colspan="4">&nbsp;</td>
						<td>DATE:</td>
						<td colspan="2" id="dateField">15-SEP-24</td>
						<td colspan="3">&nbsp;</td>
					</tr>
					<tr>
						<td colspan="2">EMPLOYEE:</td>
						<td colspan="2" id="employeeName"></td>
						<td>STATUS:</td>
						<td colspan="2">REGULAR</td>
						<td>HOURS WORKED <span id="hoursWorked"></span></td>
						<td colspan="2" id="hoursWorkedField" data-editable="true" data-field="hoursWorked">0.00</td>
					</tr>
					<tr>
						<td rowspan="2">OVERTIME</td>
						<td rowspan="2">MIN</td>
						<td rowspan="2">PAY</td>
						<td rowspan="2">ADJUSTMENTS</td>
						<td rowspan="2">AMOUNT</td>
						<td rowspan="2">DEDUCTION</td>
						<td rowspan="2">AMOUNT</td>
						<td colspan="3" rowspan="2">&nbsp;</td>
					</tr>
					<tr></tr>
					<tr>
						<td colspan="7">&nbsp;</td>
						<td colspan="2">GROSS PAY</td>
						<td id="grossPay" data-field="grossPay">0.00</td>
					</tr>
					<tr>
						<td>REGULAR</td>
						<td>&nbsp;</td>
						<td>&nbsp;</td>
						<td>INCENTIVE</td>
						<td>&nbsp;</td>
						<td>W/H TAX</td>
						<td id="taxField" data-editable="true" data-field="sss">0.00</td>
						<td colspan="2">DEDUCTION</td>
						<td id="totalDeductions" data-field="totalDeductions">0.00</td>
					</tr>
					<tr>
						<td>&nbsp;</td>
						<td>&nbsp;</td>
						<td>&nbsp;</td>
						<td>PAID LEAVES</td>
						<td>&nbsp;</td>
						<td>SSS</td>
						<td id="sssField" data-editable="true" data-field="sss">0.00</td>
						<td colspan="3">&nbsp;</td>
					</tr>
					<tr>
						<td>&nbsp;</td>
						<td>&nbsp;</td>
						<td>&nbsp;</td>
						<td>HOLIDAY PAY</td>
						<td id="holidayPay" data-editable="true" data-field="holiday">0.00</td>
						<td>PHILHEALTH</td>
						<td id="philhealthField" data-editable="true" data-field="philhealth">0.00</td>
						<th colspan="2">TOTAL</th>
						<td id="totalField" data-field=totalField>0.00</td>
					</tr>
					<tr>
						<td>OTHERS</td>
						<td>&nbsp;</td>
						<td>&nbsp;</td>
						<td>TARDINESS</td>
						<td>&nbsp;</td>
						<td>PAG-IBIG</td>
						<td id="pagibigField" data-editable="true" data-field="pagibig">0.00</td>
						<td colspan="2">NET PAY</td>
						<td id="netPay" data-field="netPay">0.00</td>
					</tr>
					<tr>
						<td>&nbsp;</td>
						<td>&nbsp;</td>
						<td>&nbsp;</td>
						<td>OT</td>
						<td>&nbsp;</td>
						<td>LOAN</td>
						<td id="loanField" data-editable="true" data-field="loan">0.00</td>
						<td colspan="2">RECEIVED BY:</td>
						<td id="receivedBy"></td>
					</tr>
					<tr>
						<td>&nbsp;</td>
						<td>&nbsp;</td>
						<td>&nbsp;</td>
						<td>&nbsp;</td>
						<td>&nbsp;</td>
						<td>OTHERS/C.A</td>
						<td id="othersField" data-editable="true" data-field="others">0.00</td>
						<td colspan="3">&nbsp;</td>


					</tr>
					<tr>
						<td>&nbsp;</td>
						<td>&nbsp;</td>
						<td>&nbsp;</td>
						<td>&nbsp;</td>
						<td>&nbsp;</td>
						<td>&nbsp;</td>
						<td>&nbsp;</td>
						<td colspan="2">APPROVED BY:</td>
						<td>DANVER S. REYES</td>
					</tr>
				</table>
				
			</div>
			<div class="modal-footer">
				<button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
				<button type="button" class="btn btn-primary" onclick="printModalContent()">Print</button>			</div>
		</div>
	</div>
</div>

<!-- Pagination Controls -->
<div class="d-flex justify-content-between mt-3">
	<button id="prevPage" class="btn btn-secondary" disabled>Previous</button>
	<span id="pageInfo">Page 1</span>
	<button id="nextPage" class="btn btn-secondary">Next</button>
</div>

<style>
	html, body {
		height: 100%;
		margin: 0;
		display: flex;
		flex-direction: column;
	}


	.modal-body {
		overflow-x: auto;
		min-width: 100%;
	}
</style>
<script>
	// Initialize jsPDF
	const { jsPDF } = window.jspdf;

	function adjustFontSizeForPrint(table) {
		const rows = table.querySelectorAll("tr");
		rows.forEach(row => {
			const cells = row.querySelectorAll("th, td");
			cells.forEach(cell => {
				let fontSize = parseInt(window.getComputedStyle(cell).fontSize);

				// Reduce font size until the text fits
				while (cell.scrollWidth > cell.clientWidth && fontSize > 6) { // Minimum font size of 6px
					fontSize--;
					cell.style.fontSize = `${fontSize}px`;
				}
			});
		});
	}

	function printModalContent() {
		console.log("Print button clicked");

		// Clone the modal content
		const modalContent = document.querySelector("#detailsModal .modal-content").cloneNode(true);

		// Remove unnecessary buttons from the cloned content
		const buttons = modalContent.querySelectorAll("button");
		buttons.forEach(button => button.remove());

		// Clone the table and add it below the original table
		const originalTable = modalContent.querySelector("table");
		if (originalTable) {
			const clonedTable = originalTable.cloneNode(true); // Clone the table

			// Update the second table's text to "TB5'S COPY"
			const employeeCopyText = clonedTable.querySelector("th[colspan='3']");
			if (employeeCopyText && employeeCopyText.innerText === "EMPLOYEE'S COPY") {
				employeeCopyText.innerText = "TB5'S COPY";
			}

			// Add spacing between the tables
			originalTable.style.marginBottom = "10px"; // Reduced spacing
			modalContent.appendChild(clonedTable); // Add the cloned table below the original one
		}

		// Adjust font size for print
		adjustFontSizeForPrint(modalContent);

		// Open a new window and write the modal content to it
		const printWindow = window.open("", "_blank");
		printWindow.document.write(`
        <html lang="en">
            <head>
                <title>Employee Payslip</title>
                <style>
                    body {
                        font-family: Arial, sans-serif;
                        margin: 0 !important;
                        padding: 0 !important;
                    }
                    table {
                        width: 100%;
                        border-collapse: collapse;
                        page-break-inside: auto;
                        margin: 0 !important;
                        padding: 0 !important;
                    }
                    th, td {
                        border: 1px solid black;
                        padding: 4px !important;
                        text-align: left;
                        white-space: nowrap !important;
                        overflow: hidden !important;
                        text-overflow: ellipsis !important;
                        font-size: 10px !important;
                    }
                    th {
                        background-color: #f2f2f2 !important;
                    }
                    tr {
                        page-break-inside: avoid !important;
                        page-break-after: auto !important;
                    }
                    @@media print {
                        body {
                            margin: 0 !important;
                            padding: 0 !important;
                        }
                        table {
                            width: 100% !important;
                            font-size: 10px !important;
                        }
                        th, td {
                            padding: 4px !important;
                            border: 1px solid black !important;
                        }
                        th {
                            background-color: #f2f2f2 !important;
                        }
                        /* Add spacing between tables */
                        table:first-of-type {
                            margin-bottom: 10px !important;
                        }
                        /* Hide unnecessary elements */
                        .modal-header, .modal-footer, .btn-close {
                            display: none !important;
                        }
                        /* Remove margins and padding from the print window */
                        @@page {
                            margin: 0 !important;
                            padding: 0 !important;
                        }
                    }
                </style>
            </head>
            <body>
                ${modalContent.innerHTML}
            </body>
        </html>
    `);
		printWindow.document.close();

		// Trigger the browser's print dialog
		printWindow.print();
	}

	// Function to save the modal content as a PDF
	// 
	@*function saveModalAsPDF() {
		console.log("Save as PDF button clicked"); // Debugging

		// Clone the modal content
		const modalContent = document.querySelector("#detailsModal .modal-content").cloneNode(true);
		console.log("Modal content cloned:", modalContent); // Debugging

		// Remove unnecessary buttons from the cloned content
		const buttons = modalContent.querySelectorAll("button");
		buttons.forEach(button => button.remove());
		console.log("Buttons removed from cloned content"); // Debugging

		// Create a temporary container to hold the modal content
		const tempContainer = document.createElement("div");
		tempContainer.style.position = "absolute";
		tempContainer.style.left = "-9999px"; // Move off-screen
		tempContainer.appendChild(modalContent);
		document.body.appendChild(tempContainer);

		// Use html2canvas to capture the modified content
		html2canvas(modalContent, {
			logging: true, // Enable logging for debugging
			useCORS: true, // Enable cross-origin resource sharing
			allowTaint: true, // Allow tainted images (if any)
			scale: 2, // Increase scale for better quality
		})
			.then(canvas => {
				console.log("html2canvas completed successfully"); // Debugging

				const imgData = canvas.toDataURL('image/png');
				console.log("Image data generated:", imgData); // Debugging

				const pdf = new jsPDF('p', 'mm', 'a4'); // Use the initialized jsPDF
				const imgWidth = 210; // A4 width in mm
				const imgHeight = (canvas.height * imgWidth) / canvas.width;

				pdf.addImage(imgData, 'PNG', 0, 0, imgWidth, imgHeight);
				pdf.save("employee_payslip.pdf");
				console.log("PDF saved successfully"); // Debugging
			})
			.catch(error => {
				console.error("Error in html2canvas:", error); // Debugging
			})
			.finally(() => {
				// Clean up the temporary container
				document.body.removeChild(tempContainer);
			});
	}*@

	function adjustFontSizeToFit(table) {
		const rows = table.querySelectorAll("tr");
		rows.forEach(row => {
			const cells = row.querySelectorAll("th, td");
			cells.forEach(cell => {
				let fontSize = parseInt(window.getComputedStyle(cell).fontSize);

				// Reduce font size until the text fits
				while (cell.scrollWidth > cell.clientWidth && fontSize > 8) { // Minimum font size of 8px
					fontSize--;
					cell.style.fontSize = `${fontSize}px`;
				}
			});
		});
	}

	document.addEventListener("DOMContentLoaded", function () {
		let currentPage = 0;
		const rowsPerPage = 7;
		const table = document.getElementById("employeeTable");
		const tbody = table.querySelector("tbody");
		let allRows = Array.from(tbody.rows);
		let filteredRows = [...allRows];

		function totalPages() {
			return Math.ceil(filteredRows.length / rowsPerPage);
		}

		function showPage(page) {
			tbody.innerHTML = "";
			const start = (page - 1) * rowsPerPage;
			const end = start + rowsPerPage;
			filteredRows.slice(start, end).forEach(row => tbody.appendChild(row));
			document.getElementById("pageInfo").innerText = `Page ${page} of ${totalPages()}`;
			document.getElementById("prevPage").disabled = page === 1;
			document.getElementById("nextPage").disabled = page === totalPages();
		}

		function searchEmployee() {
			const searchInput = document.getElementById("searchInput").value.toLowerCase();
			filteredRows = allRows.filter(row =>
				Array.from(row.cells).some(cell => cell.innerText.toLowerCase().includes(searchInput))
			);
			currentPage = 1;
			showPage(currentPage);
		}
		
		document.getElementById("searchInput").addEventListener("keyup", searchEmployee);
		document.getElementById("prevPage").addEventListener("click", () => currentPage > 1 && showPage(--currentPage));
		document.getElementById("nextPage").addEventListener("click", () => currentPage < totalPages() && showPage(++currentPage));

		showPage(currentPage);

		// Update the existing event listener for the View button
		document.getElementById("employeeTable").addEventListener("click", function (event) {
			if (event.target.classList.contains("btn-view")) {
				const row = event.target.closest("tr");
				const employeeId = row.cells[0].innerText;

				fetch(`/Dashboard/GetEmployeeDetails?id=${employeeId}`)
					.then(response => {
						if (!response.ok) throw new Error('Network response was not ok');
						return response.json();
					})
					.then(data => {
						const employeeName = data.name || data.nameEmployeeData || "Unknown Employee";

						// Update all fields
						document.getElementById("employeeName").innerText = employeeName;
						document.getElementById("receivedBy").innerText = employeeName;
						document.getElementById("holidayPay").innerText = (data.holidayPay || 0).toFixed(2);
						document.getElementById("grossPay").innerText = (data.grossPay || 0).toFixed(2);
						document.getElementById("netPay").innerText = (data.netPay || 0).toFixed(2);
						document.getElementById("totalField").innerText = (data.grossPay || 0).toFixed(2);
						document.getElementById("taxField").innerText = (data.philhealth || 0).toFixed(2);
						document.getElementById("sssField").innerText = (data.sss || 0).toFixed(2);
						document.getElementById("philhealthField").innerText = (data.philhealth || 0).toFixed(2);
						document.getElementById("pagibigField").innerText = (data.pagibig || 0).toFixed(2);
						document.getElementById("loanField").innerText = (data.loans || 0).toFixed(2);
						document.getElementById("hoursWorkedField").innerText = data.hoursWorked.toFixed(2); 
						
						// Calculate total deductions
						const totalDeductions = (data.sss || 0) + (data.philhealth || 0) + (data.pagibig || 0) + (data.loans || 0) + (data.cashAdvance || 0);
						document.getElementById("totalDeductions").innerText = totalDeductions.toFixed(2);

						const netPay = (data.grossPay || 0) - totalDeductions;
						document.getElementById("netPay").innerText = netPay.toFixed(2);

						new bootstrap.Modal(document.getElementById("detailsModal")).show();
					})
					.catch(error => {
						console.error("Error:", error);
						const employeeName = row.cells[1].innerText || "Unknown Employee";
						document.getElementById("employeeName").innerText = employeeName;
						document.getElementById("receivedBy").innerText = employeeName;
						new bootstrap.Modal(document.getElementById("detailsModal")).show();
					});
			}
		});

		// Handle File Upload & Sheet Selection
		document.getElementById("excelFileInput").addEventListener("change", function (event) {
			const file = event.target.files[0];
			const fileLabel = document.getElementById("fileInputLabel"); // Get the label element

			if (file) {
				// Update the file input label
				fileLabel.textContent = file.name;

				const formData = new FormData();
				formData.append("file", file);

				fetch("/Dashboard/GetSheets", { method: "POST", body: formData })
					.then(response => response.json())
					.then(data => {
						const sheetSelect = document.getElementById("sheetSelect");
						sheetSelect.innerHTML = '<option>Choose Sheet</option>';
						data.forEach(sheet => {
							const option = document.createElement("option");
							option.value = sheet;
							option.textContent = sheet;
							sheetSelect.appendChild(option);
						});
						sheetSelect.disabled = false;
					})
					.catch(error => {
						console.error("Error fetching sheets:", error);
						// Reset the label if there's an error
						fileLabel.textContent = "Choose File";
					});
			} else {
				// Reset if no file selected
				fileLabel.textContent = "Choose File";
			}
		});

		document.getElementById("sheetSelect").addEventListener("change", function (event) {
			const sheetName = event.target.value;
			const file = document.getElementById("excelFileInput").files[0];

			if (file && sheetName) {
				const formData = new FormData();
				formData.append("file", file);
				formData.append("sheetName", sheetName);

				fetch("/Dashboard/GetData", { method: "POST", body: formData })
					.then(response => response.json())
					.then(data => {
						tbody.innerHTML = "";
						data.forEach(employee => {
							const row = document.createElement("tr");
							row.innerHTML = `
                <td>${employee.id}</td>
                <td><a href="#">${employee.name}</a></td>
                <td>${employee.workday}</td> <!-- Changed from department to workday -->
                <td>${employee.holiday}</td>
                <td>${employee.overtime}</td>
                <td>${employee.hoursWorked}</td>
                <td>
                    <button class="btn btn-primary btn-view">View</button>
                    <button class="btn btn-warning btn-view">Edit</button>
                    <button class="btn btn-danger btn-delete">Delete</button>
                </td>
            `;
							tbody.appendChild(row);
						});

						allRows = Array.from(tbody.rows);
						filteredRows = [...allRows];
						showPage(1);
						adjustFontSizeToFit(document.getElementById("employeeTable"));
					})
			}
		});
	});
</script>