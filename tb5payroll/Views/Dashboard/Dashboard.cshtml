@{
	Layout = "_DashboardLayout";
	ViewBag.Title = "Dashboard";
}

<h2 class="text-left mb-4">Employee Dashboard</h2>

<!-- Toggle Switch for Auto/Manual Mode -->
<div class="form-check form-switch mb-3">
	<input class="form-check-input" type="checkbox" id="modeToggle" checked>
	<label class="form-check-label" for="modeToggle">Automatic Mode</label>
</div>

<div class="dashboard-controls mb-3">
	<!-- Search Input -->
	<input type="text" id="searchInput" class="form-control" placeholder="Search Employee..." onkeyup="searchEmployee()">

	<!-- Print Button -->
	<button id="archiveBtn" class="btn btn-warning">
		<i class="fas fa-archive"></i> Archive Current Data
	</button>
	
	<!-- File Input with custom styling -->
	<div class="file-input-container">
		<div class="custom-file-input">
			<input type="file" id="excelFileInput" accept=".xlsx">
			<label for="excelFileInput" class="custom-file-input-label">
				<span id="fileInputLabel">Choose File</span>
				<i class="fas fa-upload ms-2"></i>
			</label>
		</div>
	</div>

	<!-- Sheet Select -->
	<select id="sheetSelect" class="form-select" disabled>
		<option>Choose Sheet</option>
	</select>
</div>

<!-- Employee Table -->
<div class="table-responsive" style="max-height: 370px; overflow-y: auto; border: 1px solid #ccc;">
	<table class="table table-sm table-bordered text-center" id="employeeTable" style="margin-bottom: 0; font-size: 17px;">
		<thead class="table-dark" style="background-color: skyblue;">
		<tr>
			<th style="position: sticky; top: 0; z-index: 2; background: skyblue;">ID No</th>
			<th style="position: sticky; top: 0; z-index: 2; background: skyblue;">Name</th>
			<th style="position: sticky; top: 0; z-index: 2; background: skyblue;">Workday</th> 
			<th style="position: sticky; top: 0; z-index: 2; background: skyblue;">Holiday</th>
			<th style="position: sticky; top: 0; z-index: 2; background: skyblue;">Overtime</th>
			<th style="position: sticky; top: 0; z-index: 2; background: skyblue;">Hours Worked</th>
			<th style="position: sticky; top: 0; z-index: 2; background: skyblue;">Actions</th>
		</tr>
		</thead>
		<tbody>
		<!-- Rows will be populated dynamically -->
		</tbody>
	</table>
</div>

@await Html.PartialAsync("_PayslipModal")

<!-- Pagination Controls -->
<div class="d-flex justify-content-between mt-3">
	<button id="prevPage" class="btn btn-secondary" disabled>Previous</button>
	<span id="pageInfo">Page 1</span>
	<button id="nextPage" class="btn btn-secondary">Next</button>
</div>

<style>
	html, body {
		height: 100%;
		margin: 0;
		display: flex;
		flex-direction: column;
	}


	.modal-body {
		overflow-x: auto;
		min-width: 100%;
	}
</style>
<script>
	// Initialize jsPDF
	const { jsPDF } = window.jspdf;

	function adjustFontSizeForPrint(table) {
		const rows = table.querySelectorAll("tr");
		rows.forEach(row => {
			const cells = row.querySelectorAll("th, td");
			cells.forEach(cell => {
				let fontSize = parseInt(window.getComputedStyle(cell).fontSize);

				// Reduce font size until the text fits
				while (cell.scrollWidth > cell.clientWidth && fontSize > 6) { // Minimum font size of 6px
					fontSize--;
					cell.style.fontSize = `${fontSize}px`;
				}
			});
		});
	}

	function printModalContent() {
		console.log("Print button clicked");

		// Clone the modal content
		const modalContent = document.querySelector("#detailsModal .modal-content").cloneNode(true);

		// Remove unnecessary buttons from the cloned content
		const buttons = modalContent.querySelectorAll("button");
		buttons.forEach(button => button.remove());

		// Clone the table and add it below the original table
		const originalTable = modalContent.querySelector("table");
		if (originalTable) {
			const clonedTable = originalTable.cloneNode(true); // Clone the table

			// Update the second table's text to "TB5'S COPY"
			const employeeCopyText = clonedTable.querySelector("th[colspan='3']");
			if (employeeCopyText && employeeCopyText.innerText === "EMPLOYEE'S COPY") {
				employeeCopyText.innerText = "TB5'S COPY";
			}

			// Add spacing between the tables
			originalTable.style.marginBottom = "10px"; // Reduced spacing
			modalContent.appendChild(clonedTable); // Add the cloned table below the original one
		}

		// Adjust font size for print
		adjustFontSizeForPrint(modalContent);

		// Open a new window and write the modal content to it
		const printWindow = window.open("", "_blank");
		printWindow.document.write(`
        <html lang="en">
            <head>
                <title>Employee Payslip</title>
                <style>
                    body {
                        font-family: Arial, sans-serif;
                        margin: 0 !important;
                        padding: 0 !important;
                    }
                    table {
                        width: 100%;
                        border-collapse: collapse;
                        page-break-inside: auto;
                        margin: 0 !important;
                        padding: 0 !important;
                    }
                    th, td {
                        border: 1px solid black;
                        padding: 4px !important;
                        text-align: left;
                        white-space: nowrap !important;
                        overflow: hidden !important;
                        text-overflow: ellipsis !important;
                        font-size: 10px !important;
                    }
                    th {
                        background-color: #f2f2f2 !important;
                    }
                    tr {
                        page-break-inside: avoid !important;
                        page-break-after: auto !important;
                    }
                    @@media print {
                        body {
                            margin: 0 !important;
                            padding: 0 !important;
                        }
                        table {
                            width: 100% !important;
                            font-size: 10px !important;
                        }
                        th, td {
                            padding: 4px !important;
                            border: 1px solid black !important;
                        }
                        th {
                            background-color: #f2f2f2 !important;
                        }
                        /* Add spacing between tables */
                        table:first-of-type {
                            margin-bottom: 10px !important;
                        }
                        /* Hide unnecessary elements */
                        .modal-header, .modal-footer, .btn-close {
                            display: none !important;
                        }
                        /* Remove margins and padding from the print window */
                        @@page {
                            margin: 0 !important;
                            padding: 0 !important;
                        }
                    }
                </style>
            </head>
            <body>
                ${modalContent.innerHTML}
            </body>
        </html>
    `);
		printWindow.document.close();

		// Trigger the browser's print dialog
		printWindow.print();
	}

	// Function to save the modal content as a PDF
	// 
	@*function saveModalAsPDF() {
		console.log("Save as PDF button clicked"); // Debugging

		// Clone the modal content
		const modalContent = document.querySelector("#detailsModal .modal-content").cloneNode(true);
		console.log("Modal content cloned:", modalContent); // Debugging

		// Remove unnecessary buttons from the cloned content
		const buttons = modalContent.querySelectorAll("button");
		buttons.forEach(button => button.remove());
		console.log("Buttons removed from cloned content"); // Debugging

		// Create a temporary container to hold the modal content
		const tempContainer = document.createElement("div");
		tempContainer.style.position = "absolute";
		tempContainer.style.left = "-9999px"; // Move off-screen
		tempContainer.appendChild(modalContent);
		document.body.appendChild(tempContainer);

		// Use html2canvas to capture the modified content
		html2canvas(modalContent, {
			logging: true, // Enable logging for debugging
			useCORS: true, // Enable cross-origin resource sharing
			allowTaint: true, // Allow tainted images (if any)
			scale: 2, // Increase scale for better quality
		})
			.then(canvas => {
				console.log("html2canvas completed successfully"); // Debugging

				const imgData = canvas.toDataURL('image/png');
				console.log("Image data generated:", imgData); // Debugging

				const pdf = new jsPDF('p', 'mm', 'a4'); // Use the initialized jsPDF
				const imgWidth = 210; // A4 width in mm
				const imgHeight = (canvas.height * imgWidth) / canvas.width;

				pdf.addImage(imgData, 'PNG', 0, 0, imgWidth, imgHeight);
				pdf.save("employee_payslip.pdf");
				console.log("PDF saved successfully"); // Debugging
			})
			.catch(error => {
				console.error("Error in html2canvas:", error); // Debugging
			})
			.finally(() => {
				// Clean up the temporary container
				document.body.removeChild(tempContainer);
			});
	}*@

	function adjustFontSizeToFit(table) {
		const rows = table.querySelectorAll("tr");
		rows.forEach(row => {
			const cells = row.querySelectorAll("th, td");
			cells.forEach(cell => {
				let fontSize = parseInt(window.getComputedStyle(cell).fontSize);

				// Reduce font size until the text fits
				while (cell.scrollWidth > cell.clientWidth && fontSize > 8) { // Minimum font size of 8px
					fontSize--;
					cell.style.fontSize = `${fontSize}px`;
				}
			});
		});
	}

	document.addEventListener("DOMContentLoaded", function () {
		let currentPage = 0;
		const rowsPerPage = 7;
		const table = document.getElementById("employeeTable");
		const tbody = table.querySelector("tbody");
		let allRows = Array.from(tbody.rows);
		let filteredRows = [...allRows];

		async function loadInitialData() {
			const tableContainer = document.querySelector('.table-responsive');

			// Create overlay div - this will be our only loading indicator
			const overlay = document.createElement('div');
			overlay.className = 'position-absolute top-0 start-0 w-100 h-100 d-flex justify-content-center align-items-center bg-light bg-opacity-75';
			overlay.style.zIndex = '10';

			// Create larger spinner
			overlay.innerHTML = '<div class="spinner-border text-primary" style="width: 3rem; height: 3rem;" role="status"><span class="visually-hidden">Loading...</span></div>';

			// Add to container
			tableContainer.style.position = 'relative';
			tableContainer.appendChild(overlay);

			try {
				const response = await fetch('/Dashboard/GetInitialData');
				const result = await response.json();

				if (!response.ok) {
					throw new Error(result.message || 'Failed to load data');
				}

				if (!result.success) {
					showEmptyState(result.message || 'No employee data available');
					return;
				}

				tbody.innerHTML = "";
				result.data.forEach(employee => {
					const row = document.createElement("tr");
					row.innerHTML = `
                <td>${employee.id}</td>
                <td><a href="#">${employee.name}</a></td>
                <td>${employee.workday}</td> 
                <td>${employee.holiday}</td>
                <td>${employee.overtime}</td>
                <td>${employee.hoursWorked}</td>
                <td>
                    <button class="btn btn-primary btn-view">View</button>
                    <button class="btn btn-warning btn-view">Edit</button>
                    <button class="btn btn-danger btn-delete">Delete</button>
                </td>
            `;
					tbody.appendChild(row);
				});

				allRows = Array.from(tbody.rows);
				filteredRows = [...allRows];
				showPage(1);
				adjustFontSizeToFit(document.getElementById("employeeTable"));

			} catch (error) {
				console.error("Error loading initial data:", error);
				showEmptyState(error.message || 'Failed to load employee data');
			} finally {
				overlay.remove();
			}
		}

		function showEmptyState(message) {
			tbody.innerHTML = `
        <tr>
            <td colspan="7" class="text-center py-4">
                <div class="text-muted">${message}</div>
                <small class="text-muted">Upload an Excel file to view data</small>
            </td>
        </tr>
    `;
			allRows = Array.from(tbody.rows);
			filteredRows = [...allRows];
			showPage(1);
		}
		
		
		function totalPages() {
			return Math.ceil(filteredRows.length / rowsPerPage);
		}

		function showPage(page) {
			tbody.innerHTML = "";
			const start = (page - 1) * rowsPerPage;
			const end = start + rowsPerPage;
			filteredRows.slice(start, end).forEach(row => tbody.appendChild(row));
			document.getElementById("pageInfo").innerText = `Page ${page} of ${totalPages()}`;
			document.getElementById("prevPage").disabled = page === 1;
			document.getElementById("nextPage").disabled = page === totalPages();
		}

		function searchEmployee() {
			const searchInput = document.getElementById("searchInput").value.toLowerCase();
			filteredRows = allRows.filter(row =>
				Array.from(row.cells).some(cell => cell.innerText.toLowerCase().includes(searchInput))
			);
			currentPage = 1;
			showPage(currentPage);
		}
		
		document.getElementById("searchInput").addEventListener("keyup", searchEmployee);
		document.getElementById("prevPage").addEventListener("click", () => currentPage > 1 && showPage(--currentPage));
		document.getElementById("nextPage").addEventListener("click", () => currentPage < totalPages() && showPage(++currentPage));

		showPage(currentPage);

		// Update the existing event listener for the View button
		document.getElementById("employeeTable").addEventListener("click", function (event) {
			if (event.target.classList.contains("btn-view")) {
				const row = event.target.closest("tr");
				const employeeId = row.cells[0].innerText;

				fetch(`/Dashboard/GetEmployeeDetails?id=${employeeId}`)
					.then(response => {
						if (!response.ok) throw new Error('Network response was not ok');
						return response.json();
					})
					.then(data => {
						const employeeName = data.name || data.nameEmployeeData || "Unknown Employee";

						// Update all fields
						document.getElementById("employeeName").innerText = employeeName;
						document.getElementById("receivedBy").innerText = employeeName;
						document.getElementById("holidayPay").innerText = (data.holidayPay || 0).toFixed(2);
						document.getElementById("grossPay").innerText = (data.grossPay || 0).toFixed(2);
						document.getElementById("netPay").innerText = (data.netPay || 0).toFixed(2);
						document.getElementById("totalField").innerText = (data.grossPay || 0).toFixed(2);
						document.getElementById("taxField").innerText = (data.tax || 0).toFixed(2);
						document.getElementById("sssField").innerText = (data.sss || 0).toFixed(2);
						document.getElementById("philhealthField").innerText = (data.philhealth || 0).toFixed(2);
						document.getElementById("pagibigField").innerText = (data.pagibig || 0).toFixed(2);
						document.getElementById("loanField").innerText = (data.loans || 0).toFixed(2);
						document.getElementById("hoursWorkedField").innerText = data.hoursWorked.toFixed(2); 
						
						// Calculate total deductions
						const totalDeductions = (data.sss || 0) + (data.philhealth || 0) + (data.pagibig || 0) + (data.loans || 0) + (data.cashAdvance || 0) + (data.tax || 0);
						document.getElementById("totalDeductions").innerText = totalDeductions.toFixed(2);

						const netPay = (data.grossPay || 0) - totalDeductions;
						document.getElementById("netPay").innerText = netPay.toFixed(2);

						new bootstrap.Modal(document.getElementById("detailsModal")).show();
					})
					.catch(error => {
						console.error("Error:", error);
						const employeeName = row.cells[1].innerText || "Unknown Employee";
						document.getElementById("employeeName").innerText = employeeName;
						document.getElementById("receivedBy").innerText = employeeName;
						new bootstrap.Modal(document.getElementById("detailsModal")).show();
					});
			}
		});

		// Track current mode (true = automatic, false = manual)
		let isAutomaticMode = true;

		document.getElementById('modeToggle').addEventListener('change', function() {
			isAutomaticMode = this.checked;
			document.querySelector('.form-check-label').textContent =
				isAutomaticMode ? 'Automatic Mode' : 'Manual Mode';

			// Reset or reload data based on mode
			if (isAutomaticMode) {
				loadInitialData(); // Reload automatic mode data
			} else {
				loadManualModeData(); // We'll implement this later
			}
		});

		async function loadManualModeData() {
			const tableContainer = document.querySelector('.table-responsive');
			const overlay = createLoadingOverlay();
			tableContainer.appendChild(overlay);

			try {
				const response = await fetch('/Dashboard/GetManualData');
				const result = await response.json();

				if (!response.ok) {
					throw new Error(result.message || 'Failed to load manual data');
				}

				// Clear and rebuild table for manual mode
				const tbody = document.querySelector("#employeeTable tbody");
				tbody.innerHTML = "";

				// This will be populated with your manual mode data structure
				result.data.forEach(employee => {
					const row = document.createElement("tr");
					row.innerHTML = `
                <td>${employee.id}</td>
                <td>${employee.name}</td>
                <td><input type="number" class="form-control workday-input" value="${employee.workday}"></td>
                <td><input type="number" class="form-control holiday-input" value="${employee.holiday}"></td>
                <td><input type="number" class="form-control overtime-input" value="${employee.overtime}"></td>
                <td><input type="number" class="form-control hours-input" value="${employee.hoursWorked}"></td>
                <td>
                    <button class="btn btn-primary btn-save">Save</button>
                </td>
            `;
					tbody.appendChild(row);
				});

				// Add event listeners for manual editing
				document.querySelectorAll('.btn-save').forEach(btn => {
					btn.addEventListener('click', saveManualChanges);
				});

			} catch (error) {
				showEmptyState(error.message || 'Failed to load manual data');
			} finally {
				overlay.remove();
			}
		}

		function saveManualChanges(event) {
			const row = event.target.closest("tr");
			const employeeId = row.cells[0].textContent;

			const data = {
				id: employeeId,
				workday: row.querySelector('.workday-input').value,
				holiday: row.querySelector('.holiday-input').value,
				overtime: row.querySelector('.overtime-input').value,
				hoursWorked: row.querySelector('.hours-input').value
			};

			// You'll need to implement this endpoint
			fetch('/Dashboard/SaveManualData', {
				method: 'POST',
				headers: {
					'Content-Type': 'application/json',
				},
				body: JSON.stringify(data)
			})
				.then(response => response.json())
				.then(result => {
					if (result.success) {
						showToast('Changes saved successfully!');
					} else {
						showToast('Error saving changes: ' + result.message, 'error');
					}
				});
		}

		function showToast(message, type = 'success') {
			const toast = document.createElement('div');
			toast.className = `toast align-items-center text-white bg-${type === 'success' ? 'success' : 'danger'} border-0`;
			toast.setAttribute('role', 'alert');
			toast.setAttribute('aria-live', 'assertive');
			toast.setAttribute('aria-atomic', 'true');

			toast.innerHTML = `
        <div class="d-flex">
            <div class="toast-body">
                ${message}
            </div>
            <button type="button" class="btn-close btn-close-white me-2 m-auto" data-bs-dismiss="toast" aria-label="Close"></button>
        </div>
    `;

			const container = document.querySelector('.toast-container') || createToastContainer();
			container.appendChild(toast);

			const bsToast = new bootstrap.Toast(toast);
			bsToast.show();

			setTimeout(() => {
				toast.remove();
			}, 5000);
		}

		function createToastContainer() {
			const container = document.createElement('div');
			container.className = 'toast-container';
			document.body.appendChild(container);
			return container;
		}

        document.getElementById('archiveBtn').addEventListener('click', async function() {
            const btn = this;
            const originalHtml = btn.innerHTML;

            // Set loading state
            btn.disabled = true;
            btn.innerHTML = '<span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span> Archiving...';

            try {
                if (!confirm('This will create a complete snapshot of all current employee data. Continue?')) {
                    return;
                }

                const response = await fetch('/Dashboard/ArchiveCurrentData', {
                    method: 'POST',
                    headers: {
                        'Accept': 'application/json'
                    }
                });

                const result = await response.json();
                console.log("Archive result:", result);

                if (result.success) {
                    // Success notification
                    const successMsg = `Archived ${result.count} employees\n` +
                        `Including: Basic info, Hours, Pay, Deductions, etc.`;

                    if (typeof Swal !== 'undefined') {
                        Swal.fire('Success!', successMsg, 'success');
                    } else {
                        alert(successMsg);
                    }
                } else {
                    // Show detailed error
                    console.error("Archive failed:", result.errorDetails);
                    const errorMsg = result.message +
                        (result.errorDetails ? '\n\nTechnical details:\n' + result.errorDetails : '');

                    if (typeof Swal !== 'undefined') {
                        Swal.fire('Error!', errorMsg, 'error');
                    } else {
                        alert(errorMsg);
                    }
                }
            } catch (error) {
                console.error('Archive error:', error);
                alert('Archive failed: ' + error.message);
            } finally {
                btn.disabled = false;
                btn.innerHTML = originalHtml;
            }
        });

		// Handle File Upload & Sheet Selection
		document.getElementById("excelFileInput").addEventListener("change", function (event) {
			const file = event.target.files[0];
			const fileLabel = document.getElementById("fileInputLabel"); // Get the label element

			sheetSelect.innerHTML = '<option>Loading...</option>';
			sheetSelect.disabled = true;
			
			if (file) {
				// Update the file input label
				fileLabel.textContent = file.name;

				const formData = new FormData();
				formData.append("file", file);

				fetch("/Dashboard/GetSheets", { method: "POST", body: formData })
					.then(response => response.json())
					.then(data => {
						const sheetSelect = document.getElementById("sheetSelect");
						sheetSelect.innerHTML = '<option>Choose Sheet</option>';
						data.forEach(sheet => {
							const option = document.createElement("option");
							option.value = sheet;
							option.textContent = sheet;
							sheetSelect.appendChild(option);
						});
						sheetSelect.disabled = false;
					})
					.catch(error => {
						console.error("Error fetching sheets:", error);
						// Reset the label if there's an error
						fileLabel.textContent = "Choose File";
					});
			} else {
				// Reset if no file selected
				fileLabel.textContent = "Choose File";
			}
		});

		

		document.getElementById("sheetSelect").addEventListener("change", function (event) {
			const sheetName = event.target.value;
			const file = document.getElementById("excelFileInput").files[0];

			if (file && sheetName) {
				const formData = new FormData();
				formData.append("file", file);
				formData.append("sheetName", sheetName);

				fetch("/Dashboard/GetData", { method: "POST", body: formData })
					.then(response => response.json())
					.then(data => {
						tbody.innerHTML = "";
						data.forEach(employee => {
							const row = document.createElement("tr");
							row.innerHTML = `
                <td>${employee.id}</td>
                <td><a href="#">${employee.name}</a></td>
                <td>${employee.workday}</td> 
                <td>${employee.holiday}</td>
                <td>${employee.overtime}</td>
                <td>${employee.hoursWorked}</td>
                <td>
                    <button class="btn btn-primary btn-view">View</button>
                    <button class="btn btn-warning btn-view">Edit</button>
                    <button class="btn btn-danger btn-delete">Delete</button>
                </td>
            `;
							tbody.appendChild(row);
						});

						allRows = Array.from(tbody.rows);
						filteredRows = [...allRows];
						showPage(1);
						adjustFontSizeToFit(document.getElementById("employeeTable"));
					})
			}
		}); loadInitialData();
	});
</script>