@{
	Layout = "_ArchiveLayout";
	ViewBag.Title = "Archive";
}

<div class="container-fluid">
	<h2 class="mb-4">Employee Archive</h2>

	<!-- Filter Controls -->
	<div class="row mb-3">
		<div class="col-md-3">
			<label for="monthFilter" class="form-label">Month:</label>
			<select id="monthFilter" class="form-select">
				<option value="0">All Months</option>
				<option value="1">January</option>
				<option value="2">February</option>
				<option value="3">March</option>
				<option value="4">April</option>
				<option value="5">May</option>
				<option value="6">June</option>
				<option value="7">July</option>
				<option value="8">August</option>
				<option value="9">September</option>
				<option value="10">October</option>
				<option value="11">November</option>
				<option value="12">December</option>
			</select>
		</div>
		<div class="col-md-3">
			<label for="yearFilter" class="form-label">Year:</label>
			<select id="yearFilter" class="form-select">
				<option value="0">All Years</option>
				<!-- Will be populated by JavaScript -->
			</select>
		</div>
		<div class="col-md-6 d-flex align-items-end">
			<div class="input-group">
				<input type="text" id="searchInput" class="form-control" placeholder="Search employee name or ID...">
				<button class="btn btn-outline-secondary" type="button" id="searchButton">
					<i class="fas fa-search"></i>
				</button>
				<button class="btn btn-outline-secondary" type="button" id="clearFilters">
					<i class="fas fa-times"></i> Clear
				</button>
			</div>
		</div>
	</div>

	<!-- Employee Table -->
	<div class="table-responsive" style="max-height: 500px; overflow-y: auto;">
		<table class="table table-striped table-hover" id="archiveTable">
			<thead class="table-primary" style="position: sticky; top: 0;">
			<tr>
				<th>Archive ID</th>
				<th>Employee ID</th>
				<th>Name</th>
				<th>Department</th>
				<th>Archive Date</th>
				<th>Holiday Hours</th>
				<th>Overtime Hours</th>
				<th>Hours Worked</th>
				<th>Gross Pay</th>
				<th>Actions</th>
			</tr>
			</thead>
			<tbody id="archiveTableBody">
			<!-- Data will be loaded here -->
			</tbody>
		</table>
	</div>

	<!-- Pagination -->
	<div class="d-flex justify-content-between mt-3">
		<button id="prevPage" class="btn btn-secondary" disabled>Previous</button>
		<span id="pageInfo">Page 1 of 1</span>
		<button id="nextPage" class="btn btn-secondary" disabled>Next</button>
	</div>
</div>

	<script>
		document.addEventListener("DOMContentLoaded", function () {
			// Initialize variables
			let currentPage = 1;
			const rowsPerPage = 10;
			let allData = [];
			let filteredData = [];
			let currentMonth = 0;
			let currentYear = 0;
			let currentSearch = '';

			// Initialize year dropdown
			initializeYearDropdown();

			// Load initial data
			loadArchiveData();

			// Event listeners
			document.getElementById('monthFilter').addEventListener('change', function() {
				currentMonth = parseInt(this.value) || 0;
				loadArchiveData();
			});

			document.getElementById('yearFilter').addEventListener('change', function() {
				currentYear = parseInt(this.value) || 0;
				loadArchiveData();
			});

			document.getElementById('searchButton').addEventListener('click', function() {
				currentSearch = document.getElementById('searchInput').value.trim();
				loadArchiveData();
			});

			document.getElementById('clearFilters').addEventListener('click', function() {
				document.getElementById('monthFilter').value = '0';
				document.getElementById('yearFilter').value = '0';
				document.getElementById('searchInput').value = '';
				currentMonth = 0;
				currentYear = 0;
				currentSearch = '';
				loadArchiveData();
			});

			document.getElementById('searchInput').addEventListener('keyup', function(e) {
				if (e.key === 'Enter') {
					currentSearch = this.value.trim();
					loadArchiveData();
				}
			});

			document.getElementById('prevPage').addEventListener('click', function() {
				if (currentPage > 1) {
					currentPage--;
					renderTable();
				}
			});

			document.getElementById('nextPage').addEventListener('click', function() {
				if (currentPage < totalPages()) {
					currentPage++;
					renderTable();
				}
			});

			// Functions
			async function initializeYearDropdown() {
				try {
					const response = await fetch('/Archive/GetArchiveYears');
					const result = await response.json();

					if (result.success) {
						const yearSelect = document.getElementById('yearFilter');
						result.data.forEach(year => {
							const option = document.createElement('option');
							option.value = year;
							option.textContent = year;
							yearSelect.appendChild(option);
						});
					}
				} catch (error) {
					console.error('Error loading years:', error);
				}
			}

			async function loadArchiveData() {
				const loadingIndicator = document.createElement('div');
				loadingIndicator.className = 'text-center my-4';
				loadingIndicator.innerHTML = '<div class="spinner-border text-primary" role="status"><span class="visually-hidden">Loading...</span></div>';
				document.getElementById('archiveTableBody').replaceWith(loadingIndicator);

				try {
					const response = await fetch(
						`/Archive/GetArchivedData?month=${currentMonth || ''}&year=${currentYear || ''}&searchTerm=${encodeURIComponent(currentSearch)}`
					);
					const result = await response.json();

					if (result.success) {
						allData = result.data;
						filteredData = [...allData];
						currentPage = 1;
						renderTable();
					} else {
						showError(result.message || 'Failed to load archive data');
					}
				} catch (error) {
					showError('Error loading archive data: ' + error.message);
				}
			}

			function renderTable() {
				const tbody = document.getElementById('archiveTableBody');
				tbody.innerHTML = '';

				const start = (currentPage - 1) * rowsPerPage;
				const end = start + rowsPerPage;
				const pageData = filteredData.slice(start, end);

				if (pageData.length === 0) {
					tbody.innerHTML = '<tr><td colspan="10" class="text-center py-4">No records found</td></tr>';
				} else {
					pageData.forEach(employee => {
						const row = document.createElement('tr');
						row.innerHTML = `
                            <td>${employee.ArchiveId}</td>
                            <td>${employee.EmployeeId}</td>
                            <td>${employee.Name}</td>
                            <td>${employee.Department}</td>
                            <td>${employee.ArchiveDate}</td>
                            <td>${employee.HolidayHours.toFixed(1)}</td>
                            <td>${employee.OvertimeHours.toFixed(1)}</td>
                            <td>${employee.HoursWorked.toFixed(1)}</td>
                            <td>₱${employee.GrossPay.toFixed(2)}</td>
                            <td>
                                <button class="btn btn-sm btn-primary btn-view" data-id="${employee.ArchiveId}">
                                    <i class="fas fa-eye"></i> View
                                </button>
                                <button class="btn btn-sm btn-danger btn-delete" data-id="${employee.ArchiveId}">
                                    <i class="fas fa-trash"></i> Delete
                                </button>
                            </td>
                        `;
						tbody.appendChild(row);
					});
				}

				// Update pagination info
				document.getElementById('pageInfo').textContent = `Page ${currentPage} of ${totalPages()}`;
				document.getElementById('prevPage').disabled = currentPage === 1;
				document.getElementById('nextPage').disabled = currentPage === totalPages() || totalPages() === 0;
			}

			function totalPages() {
				return Math.ceil(filteredData.length / rowsPerPage);
			}

			function showError(message) {
				const alertDiv = document.createElement('div');
				alertDiv.className = 'alert alert-danger';
				alertDiv.textContent = message;
				document.getElementById('archiveTableBody').replaceWith(alertDiv);
			}

			// Handle view button clicks
			document.addEventListener('click', function(e) {
				if (e.target.classList.contains('btn-view')) {
					const archiveId = e.target.getAttribute('data-id');
					const employee = allData.find(e => e.ArchiveId === archiveId);

					if (employee) {
						// Here you would typically fetch the full archive record
						// and show it in a modal or redirect to a details page
						alert(`Viewing archive record: ${archiveId}`);
					}
				}

				if (e.target.classList.contains('btn-delete')) {
					if (confirm('Are you sure you want to delete this archive record?')) {
						const archiveId = e.target.getAttribute('data-id');
						// Implement delete functionality here
						alert(`Deleting archive record: ${archiveId}`);
					}
				}
			});
		});
	</script>
