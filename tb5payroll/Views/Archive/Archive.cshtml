@{
	Layout = "_DashboardLayout";
	ViewBag.Title = "Employee Archive";
}

<h2 class="text-left mb-4">Employee Archive</h2>

<div class="dashboard-controls mb-3">
	<!-- Search Input -->
	<input type="text" id="searchInput" class="form-control" placeholder="Search Archive...">

	<!-- Date Range Picker -->
	<div class="input-group">
		<input type="date" id="startDate" class="form-control" placeholder="Start Date">
		<span class="input-group-text">to</span>
		<input type="date" id="endDate" class="form-control" placeholder="End Date">
		<button id="filterBtn" class="btn btn-primary">Filter</button>
	</div>

	<!-- Bulk Delete Button -->
	<button id="deleteOldBtn" class="btn btn-danger ms-2" title="Delete records older than selected date">
		<i class="fas fa-trash"></i> Delete Old Records
	</button>
</div>

<!-- Archive Table -->
<div class="table-responsive" style="max-height: 370px; overflow-y: auto; border: 1px solid #ccc;">
	<table class="table table-sm table-bordered text-center" id="archiveTable" style="margin-bottom: 0; font-size: 17px;">
		<thead class="table-dark" style="background-color: skyblue;">
		<tr>
			<th style="position: sticky; top: 0; z-index: 2; background: skyblue;">ID No</th>
			<th style="position: sticky; top: 0; z-index: 2; background: skyblue;">Name</th>
			<th style="position: sticky; top: 0; z-index: 2; background: skyblue;">Archived Date</th>
			<th style="position: sticky; top: 0; z-index: 2; background: skyblue;">Hours Worked</th>
			<th style="position: sticky; top: 0; z-index: 2; background: skyblue;">Overtime</th>
			<th style="position: sticky; top: 0; z-index: 2; background: skyblue;">Holiday</th>
			<th style="position: sticky; top: 0; z-index: 2; background: skyblue;">Gross Pay</th>
			<th style="position: sticky; top: 0; z-index: 2; background: skyblue;">Net Pay</th>
			<th style="position: sticky; top: 0; z-index: 2; background: skyblue;">Actions</th>
		</tr>
		</thead>
		<tbody>
		<!-- Rows will be populated dynamically -->
		</tbody>
	</table>
</div>

<!-- Pagination Controls -->
<div class="d-flex justify-content-between mt-3">
	<button id="prevPage" class="btn btn-secondary" disabled>Previous</button>
	<span id="pageInfo">Page 1</span>
	<button id="nextPage" class="btn btn-secondary">Next</button>
</div>

<!-- Confirmation Modal for Deletion -->
<div class="modal fade" id="confirmDeleteModal" tabindex="-1" aria-hidden="true">
	<div class="modal-dialog">
		<div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title">Confirm Deletion</h5>
				<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
			</div>
			<div class="modal-body">
				<p id="deleteModalMessage">Are you sure you want to delete this record?</p>
			</div>
			<div class="modal-footer">
				<button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
				<button type="button" class="btn btn-danger" id="confirmDeleteBtn">Delete</button>
			</div>
		</div>
	</div>
</div>

<!-- Reuse the same details modal from Dashboard -->
@await Html.PartialAsync("_PayslipModal")

<style>
	html, body {
		height: 100%;
		margin: 0;
		display: flex;
		flex-direction: column;
	}

	.modal-body {
		overflow-x: auto;
		min-width: 100%;
	}

	.input-group-text {
		background-color: #e9ecef;
	}
</style>

<script>
	document.addEventListener("DOMContentLoaded", function () {
		let currentPage = 1;
		const rowsPerPage = 7;
		const table = document.getElementById("archiveTable");
		const tbody = table.querySelector("tbody");
		let allRows = [];
		let filteredRows = [];
		let currentArchiveId = null;

		async function loadArchiveData() {
			const tableContainer = document.querySelector('.table-responsive');

			// Show loading overlay
			const overlay = document.createElement('div');
			overlay.className = 'position-absolute top-0 start-0 w-100 h-100 d-flex justify-content-center align-items-center bg-light bg-opacity-75';
			overlay.style.zIndex = '10';
			overlay.innerHTML = '<div class="spinner-border text-primary" style="width: 3rem; height: 3rem;" role="status"><span class="visually-hidden">Loading...</span></div>';
			tableContainer.style.position = 'relative';
			tableContainer.appendChild(overlay);

			try {
				const response = await fetch('/Archive/GetArchiveData');
				const result = await response.json();

				if (!response.ok) {
					throw new Error(result.message || 'Failed to load archive data');
				}

				if (!result.success) {
					showEmptyState(result.message || 'No archive data available');
					return;
				}

				populateTable(result.data);
			} catch (error) {
				console.error("Error loading archive data:", error);
				showEmptyState(error.message || 'Failed to load archive data');
			} finally {
				overlay.remove();
			}
		}

		function populateTable(data) {
			tbody.innerHTML = "";
			data.forEach(record => {
				const row = document.createElement("tr");
				// Calculate values dynamically (matches Dashboard logic)
				const basePay = record.basePayEmployeeData || 0;
				const hoursWorked = record.hoursWorkedEmployeeData || 0;
				const overtime = record.overtimeHoursEmployeeData || 0;
				const holiday = record.holidayHoursEmployeeData || 0;

				// Gross pay calculation (same as Dashboard)
				const grossPay = (basePay * hoursWorked) +
					(record.trainingEmployeeData || 0) +
					(overtime * basePay) +
					(holiday * basePay);

				// Deductions (same as Dashboard)
				const totalDeductions =
					(record.sssEmployeeData || 0) +
					(record.philHealthEmployeeData || 0) +
					(record.pagIbigEmployeeData || 0) +
					(record.loanEmployeeData || 0) +
					(record.taxEmployeeData || 0) +
					(record.cashAdvEmployeeData || 0) +
					(record.lateDeductionEmployeeData || 0) +
					(record.underTimeEmployeeData || 0);

				// Net pay calculation
				const netPay = grossPay - totalDeductions;

				row.innerHTML = `
            <td>${record.birthdayEmployeeData}</td>
            <td><a href="#">${record.nameEmployeeData}</a></td>
            <td>${new Date(record.employeeArchiveDate).toLocaleDateString()}</td>
            <td>${hoursWorked.toFixed(1)}</td>
            <td>${overtime.toFixed(1)}</td>
            <td>${holiday.toFixed(1)}</td>
            <td>${grossPay.toFixed(2)}</td>
            <td>${netPay.toFixed(2)}</td> <!-- Dynamically calculated net pay -->
            <td>
                <button class="btn btn-primary btn-view">View</button>
                <button class="btn btn-danger btn-delete" data-archiveid="${record.archiveId}">Delete</button>
            </td>
        `;
				tbody.appendChild(row);
			});
		}

		document.getElementById("archiveTable").addEventListener("click", function (event) {
			if (event.target.classList.contains("btn-view")) {
				const row = event.target.closest("tr");
				const employeeId = row.cells[0].innerText;
				const archiveDate = row.cells[2].innerText;

				fetch(`/Archive/GetArchiveDetails?id=${employeeId}&date=${archiveDate}`)
					.then(response => {
						if (!response.ok) throw new Error('Network response was not ok');
						return response.json();
					})
					.then(data => {
						const employeeName = data.nameEmployeeData || "Unknown Employee";

						// Calculate all components (matches Dashboard logic)
						const basePay = data.basePayEmployeeData || 0;
						const hoursWorked = data.hoursWorkedEmployeeData || 0;
						const trainingPay = data.trainingEmployeeData || 0;
						const overtimePay = (data.overtimeHoursEmployeeData || 0) * basePay;
						const holidayPay = (data.holidayHoursEmployeeData || 0) * basePay;

						// Gross pay calculation
						const grossPay = (basePay * hoursWorked) + trainingPay + overtimePay + holidayPay;

						// Total deductions (all possible deductions)
						const totalDeductions =
							(data.sssEmployeeData || 0) +
							(data.philHealthEmployeeData || 0) +
							(data.pagIbigEmployeeData || 0) +
							(data.loanEmployeeData || 0) +
							(data.taxEmployeeData || 0) +
							(data.cashAdvEmployeeData || 0) +
							(data.lateDeductionEmployeeData || 0) +
							(data.underTimeEmployeeData || 0);

						// Net pay calculation
						const netPay = grossPay - totalDeductions;

						// Update all fields in the modal
						document.getElementById("employeeName").innerText = employeeName;
						document.getElementById("receivedBy").innerText = employeeName;
						document.getElementById("grossPay").innerText = grossPay.toFixed(2);
						document.getElementById("totalDeductions").innerText = totalDeductions.toFixed(2);
						document.getElementById("netPay").innerText = netPay.toFixed(2);
						document.getElementById("holidayPay").innerText = holidayPay.toFixed(2);
						document.getElementById("taxField").innerText = (data.taxEmployeeData || 0).toFixed(2);
						document.getElementById("sssField").innerText = (data.sssEmployeeData || 0).toFixed(2);
						document.getElementById("philhealthField").innerText = (data.philHealthEmployeeData || 0).toFixed(2);
						document.getElementById("pagibigField").innerText = (data.pagIbigEmployeeData || 0).toFixed(2);
						document.getElementById("loanField").innerText = (data.loanEmployeeData || 0).toFixed(2);
						document.getElementById("hoursWorkedField").innerText = hoursWorked.toFixed(2);
						document.getElementById("dateField").innerText = new Date(data.employeeArchiveDate).toLocaleDateString();

						// Show the modal
						new bootstrap.Modal(document.getElementById("detailsModal")).show();
					})
					.catch(error => {
						console.error("Error loading archive details:", error);

						// Fallback display if calculations fail
						const employeeName = row.cells[1].innerText || "Unknown Employee";
						document.getElementById("employeeName").innerText = employeeName;
						document.getElementById("receivedBy").innerText = employeeName;

						// Set all amounts to 0.00 in case of error
						document.getElementById("grossPay").innerText = "0.00";
						document.getElementById("totalDeductions").innerText = "0.00";
						document.getElementById("netPay").innerText = "0.00";

						new bootstrap.Modal(document.getElementById("detailsModal")).show();
					});
			}
			else if (event.target.classList.contains("btn-delete")) {
				currentArchiveId = event.target.dataset.archiveid;
				const employeeName = event.target.closest("tr").cells[1].innerText;

				document.getElementById("deleteModalMessage").innerText =
					`Are you sure you want to delete the archive record for ${employeeName}?`;

				const deleteModal = new bootstrap.Modal(document.getElementById("confirmDeleteModal"));
				deleteModal.show();
			}
		});

// Delete confirmation handler remains unchanged
		document.getElementById("confirmDeleteBtn").addEventListener("click", async function() {
			try {
				const response = await fetch('/Archive/DeleteArchiveRecord', {
					method: 'POST',
					headers: {
						'Content-Type': 'application/json',
					},
					body: JSON.stringify(currentArchiveId)
				});

				const result = await response.json();

				if (!response.ok) {
					throw new Error(result.message || 'Failed to delete record');
				}

				if (result.success) {
					bootstrap.Modal.getInstance(document.getElementById("confirmDeleteModal")).hide();
					loadArchiveData();

					if (typeof Swal !== 'undefined') {
						Swal.fire('Success!', 'Archive record deleted successfully', 'success');
					} else {
						alert('Archive record deleted successfully');
					}
				}
			} catch (error) {
				console.error("Error deleting archive record:", error);
				alert('Error deleting archive record: ' + error.message);
			}
		});
		
		function showEmptyState(message) {
			tbody.innerHTML = `
                <tr>
                    <td colspan="9" class="text-center py-4">
                        <div class="text-muted">${message}</div>
                    </td>
                </tr>
            `;
			allRows = Array.from(tbody.rows);
			filteredRows = [...allRows];
			showPage(1);
		}

		function totalPages() {
			return Math.ceil(filteredRows.length / rowsPerPage);
		}

		function showPage(page) {
			tbody.innerHTML = "";
			const start = (page - 1) * rowsPerPage;
			const end = start + rowsPerPage;
			filteredRows.slice(start, end).forEach(row => tbody.appendChild(row));
			document.getElementById("pageInfo").innerText = `Page ${page} of ${totalPages()}`;
			document.getElementById("prevPage").disabled = page === 1;
			document.getElementById("nextPage").disabled = page === totalPages();
		}

		function searchArchive() {
			const searchInput = document.getElementById("searchInput").value.toLowerCase();
			filteredRows = allRows.filter(row =>
				Array.from(row.cells).some(cell => cell.innerText.toLowerCase().includes(searchInput))
			);
			currentPage = 1;
			showPage(currentPage);
		}

		async function filterByDate() {
			const startDateInput = document.getElementById("startDate").value;
			const endDateInput = document.getElementById("endDate").value;

			// Validate at least one date is provided
			if (!startDateInput && !endDateInput) {
				alert("Please enter at least one date (start or end)");
				return;
			}

			// Show loading indicator
			const tableContainer = document.querySelector('.table-responsive');
			const overlay = document.createElement('div');
			overlay.className = 'position-absolute top-0 start-0 w-100 h-100 d-flex justify-content-center align-items-center bg-light bg-opacity-75';
			overlay.style.zIndex = '10';
			overlay.innerHTML = '<div class="spinner-border text-primary" style="width: 3rem; height: 3rem;" role="status"><span class="visually-hidden">Loading...</span></div>';
			tableContainer.style.position = 'relative';
			tableContainer.appendChild(overlay);

			try {
				// Build query parameters
				const params = new URLSearchParams();
				if (startDateInput) params.append('startDate', startDateInput);
				if (endDateInput) params.append('endDate', endDateInput);

				const response = await fetch(`/Archive/GetArchiveData?${params.toString()}`);
				const result = await response.json();

				if (!response.ok) {
					throw new Error(result.message || 'Failed to filter archive data');
				}

				if (!result.data || result.data.length === 0) {
					showEmptyState("No records found for the selected date range");
				} else {
					populateTable(result.data);
				}
			} catch (error) {
				console.error("Error filtering archive data:", error);
				showEmptyState("Error loading filtered data");
			} finally {
				overlay.remove();
			}
		}

		// Event listeners
		document.getElementById("searchInput").addEventListener("keyup", searchArchive);
		document.getElementById("filterBtn").addEventListener("click", filterByDate);
		document.getElementById("prevPage").addEventListener("click", () => currentPage > 1 && showPage(--currentPage));
		document.getElementById("nextPage").addEventListener("click", () => currentPage < totalPages() && showPage(++currentPage));

		document.getElementById("deleteOldBtn").addEventListener("click", async function() {
			const cutoffDateInput = prompt("Enter cutoff date (YYYY-MM-DD). All records before this date will be deleted:");

			if (!cutoffDateInput) return;

			if (!/^\d{4}-\d{2}-\d{2}$/.test(cutoffDateInput)) {
				alert("Invalid date format. Please use YYYY-MM-DD");
				return;
			}

			const cutoffDate = new Date(cutoffDateInput);
			cutoffDate.setHours(23, 59, 59, 999);

			if (confirm(`Are you sure you want to delete ALL records before ${cutoffDate.toLocaleDateString()}? This cannot be undone.`)) {
				try {
					const response = await fetch('/Archive/DeleteOldRecords', {
						method: 'POST',
						headers: {
							'Content-Type': 'application/json',
						},
						body: JSON.stringify({
							cutoffDate: cutoffDate.toISOString()
						})
					});

					const result = await response.json();

					if (!response.ok) {
						throw new Error(result.message || 'Failed to delete old records');
					}

					if (result.success) {
						loadArchiveData();
						if (typeof Swal !== 'undefined') {
							Swal.fire('Success!', result.message, 'success');
						} else {
							alert(result.message);
						}
					}
				} catch (error) {
					console.error("Error deleting old records:", error);
					alert('Error deleting old records: ' + error.message);
				}
			}
		});

		// Initial load
		loadArchiveData();
	});

	function printModalContent() {
		// Print function implementation
	}
</script>