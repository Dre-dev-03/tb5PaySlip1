// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using tb5payroll.Data;

#nullable disable

namespace tb5payroll.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250507075543_UpdatedIdentityAndRelationships")]
    partial class UpdatedIdentityAndRelationships
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("Roles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("varchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("tb5payroll.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("FullName")
                        .HasColumnType("longtext");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("tb5payroll.Models.EmployeeArchive", b =>
                {
                    b.Property<string>("ArchiveId")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("archiveId");

                    b.Property<decimal>("BasePayEmployeeData")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("basePayEmployeeData");

                    b.Property<int?>("BirthdayEmployeeData")
                        .HasColumnType("int")
                        .HasColumnName("birthdayEmployeeData");

                    b.Property<decimal?>("CalculatedPayEmployeeData")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("calculatedPayEmployeeData");

                    b.Property<decimal?>("CashAdvEmployeeData")
                        .HasColumnType("decimal(7,2)")
                        .HasColumnName("cashAdvEmployeeData");

                    b.Property<DateTime>("EmployeeArchiveDate")
                        .HasColumnType("datetime")
                        .HasColumnName("employeeArchiveDate");

                    b.Property<decimal?>("HolidayHoursEmployeeData")
                        .HasColumnType("decimal(4,1)")
                        .HasColumnName("holidayHoursEmployeeData");

                    b.Property<decimal?>("HoursWorkedEmployeeData")
                        .HasColumnType("decimal(4,1)")
                        .HasColumnName("hoursWorkedEmployeeData");

                    b.Property<string>("IdEmployeeData")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("idEmployeeData");

                    b.Property<decimal?>("LoanEmployeeData")
                        .HasColumnType("decimal(7,2)")
                        .HasColumnName("loanEmployeeData");

                    b.Property<string>("NameEmployeeData")
                        .HasColumnType("longtext")
                        .HasColumnName("nameEmployeeData");

                    b.Property<decimal?>("OvertimeHoursEmployeeData")
                        .HasColumnType("decimal(4,1)")
                        .HasColumnName("overtimeHoursEmployeeData");

                    b.Property<decimal?>("PagIbigEmployeeData")
                        .HasColumnType("decimal(6,2)")
                        .HasColumnName("pagIbigEmployeeData");

                    b.Property<decimal?>("PhilHealthEmployeeData")
                        .HasColumnType("decimal(6,2)")
                        .HasColumnName("philHealthEmployeeData");

                    b.Property<decimal?>("SssEmployeeData")
                        .HasColumnType("decimal(6,2)")
                        .HasColumnName("sssEmployeeData");

                    b.Property<decimal?>("TaxEmployeeData")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("taxEmployeeData");

                    b.Property<decimal?>("TrainingEmployeeData")
                        .HasColumnType("decimal(7,2)")
                        .HasColumnName("trainingEmployeeData");

                    b.HasKey("ArchiveId");

                    b.HasIndex("IdEmployeeData");

                    b.ToTable("EmployeeArchive");
                });

            modelBuilder.Entity("tb5payroll.Models.EmployeeData", b =>
                {
                    b.Property<string>("IdEmployeeData")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("idEmployeeData");

                    b.Property<decimal>("BasePayEmployeeData")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("basePayEmployeeData");

                    b.Property<int>("BirthdayEmployeeData")
                        .HasColumnType("int")
                        .HasColumnName("birthdayEmployeeData");

                    b.Property<decimal?>("CalculatedPayEmployeeData")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("calculatedPayEmployeeData");

                    b.Property<decimal?>("CashAdvEmployeeData")
                        .HasColumnType("decimal(7,2)")
                        .HasColumnName("cashAdvEmployeeData");

                    b.Property<decimal?>("HolidayHoursEmployeeData")
                        .HasColumnType("decimal(4,1)")
                        .HasColumnName("holidayHoursEmployeeData");

                    b.Property<decimal?>("HoursWorkedEmployeeData")
                        .HasColumnType("decimal(4,1)")
                        .HasColumnName("hoursWorkedEmployeeData");

                    b.Property<decimal?>("LateDeductionEmployeeData")
                        .HasColumnType("decimal(7,2)")
                        .HasColumnName("lateDeductionEmployeeData");

                    b.Property<decimal?>("LoanEmployeeData")
                        .HasColumnType("decimal(7,2)")
                        .HasColumnName("loanEmployeeData");

                    b.Property<string>("NameEmployeeData")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("nameEmployeeData");

                    b.Property<decimal?>("OvertimeHoursEmployeeData")
                        .HasColumnType("decimal(4,1)")
                        .HasColumnName("overtimeHoursEmployeeData");

                    b.Property<decimal?>("PagIbigEmployeeData")
                        .HasColumnType("decimal(6,2)")
                        .HasColumnName("pagIbigEmployeeData");

                    b.Property<decimal?>("PhilHealthEmployeeData")
                        .HasColumnType("decimal(6,2)")
                        .HasColumnName("philHealthEmployeeData");

                    b.Property<decimal?>("SssEmployeeData")
                        .HasColumnType("decimal(6,2)")
                        .HasColumnName("sssEmployeeData");

                    b.Property<decimal?>("TaxEmployeeData")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("taxEmployeeData");

                    b.Property<decimal?>("TrainingEmployeeData")
                        .HasColumnType("decimal(7,2)")
                        .HasColumnName("trainingEmployeeData");

                    b.Property<decimal?>("UnderTimeEmployeeData")
                        .HasColumnType("decimal(7,2)")
                        .HasColumnName("underTimeDeductionEmployeeData");

                    b.HasKey("IdEmployeeData");

                    b.HasIndex("NameEmployeeData");

                    b.ToTable("EmployeeData");
                });

            modelBuilder.Entity("tb5payroll.Models.TimeSetData", b =>
                {
                    b.Property<string>("TimeSet")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("timeSetData");

                    b.Property<int?>("EarlyOutThreshold")
                        .HasColumnType("int")
                        .HasColumnName("earlyoutThreshold");

                    b.Property<decimal?>("HalfdayMultiplier")
                        .HasColumnType("decimal(5,2)")
                        .HasColumnName("halfdayMultiplier");

                    b.Property<string>("IdEmployeeData")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("idEmployeeData");

                    b.Property<decimal?>("OvertimeMultiplier")
                        .HasColumnType("decimal(5,2)")
                        .HasColumnName("overtimeMultiplier");

                    b.Property<int?>("OvertimeThreshold")
                        .HasColumnType("int")
                        .HasColumnName("overtimeThreshold");

                    b.Property<int?>("UndertimeThreshold")
                        .HasColumnType("int")
                        .HasColumnName("undertimeThreshold");

                    b.HasKey("TimeSet");

                    b.HasIndex("IdEmployeeData");

                    b.ToTable("TimeSetData");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("tb5payroll.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("tb5payroll.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("tb5payroll.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("tb5payroll.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("tb5payroll.Models.EmployeeArchive", b =>
                {
                    b.HasOne("tb5payroll.Models.EmployeeData", null)
                        .WithMany()
                        .HasForeignKey("IdEmployeeData");
                });

            modelBuilder.Entity("tb5payroll.Models.TimeSetData", b =>
                {
                    b.HasOne("tb5payroll.Models.EmployeeData", null)
                        .WithMany()
                        .HasForeignKey("IdEmployeeData")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
